// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\xdd\x8e\xe3\x36\xb2\xbe\xf7\x53\xd4\x64\x2e\xd2\x0d\xf4\x19\x04\x07\x27\xc1\x81\xaf\x56\xb1\x35\x19\x6f\x77\xbb\xbd\xb6\x7b\xb2\x41\x30\x18\xd0\x52\xd9\x22\x5a\x22\x15\x92\x72\xb7\x77\x91\x77\x5f\x14\x49\x49\xa4\x2c\xa7\x67\xb2\x8b\xbd\xb3\xf8\x53\xf5\xd5\x0f\xab\x58\x45\xe3\x8b\x41\x91\x83\x39\xd5\x08\x7f\x6b\x50\x9d\xe0\x9f\x13\x80\x46\xa3\x9a\xc2\xa3\x46\xb5\x10\x7b\xf9\x66\x02\x20\xd5\x61\x0a\x0f\xea\xd0\x7e\xd3\x8a\x0d\x1a\xc3\xc5\x41\xbb\x95\xed\x57\x3b\x9b\x18\xa3\xf8\xae\x31\xe8\xe7\xfb\x6f\x4f\x8f\x06\xf5\x14\x7e\xed\xd8\x7c\xa2\x89\xac\x6c\xb4\x41\x75\xc5\xf3\x29\x2c\xe6\x6f\xae\xa7\x30\x73\x23\x2d\x67\xbf\xe0\xc7\xd3\x92\x55\x78\x25\x58\x85\x53\xd8\x18\xc5\xc5\xe1\xf2\x62\x62\x13\xce\x84\x9c\x66\x52\x08\xcc\x0c\x97\xe2\x9c\x67\x3f\xd7\x13\xe4\x89\x32\x7c\xcf\x32\x73\xc5\xfc\x8f\xed\xa9\xc6\x29\x24\xc1\x97\x25\x71\xb7\x68\x87\x68\x23\x6b\x8c\xcc\x64\x55\x97\x68\xf0\x8a\x8b\xba\x31\x2d\xec\x1b\xc8\x1a\xa5\xa5\x5a\x49\x3d\x85\x85\x30\x37\xc0\x2c\xcb\x29\x24\xc1\x9e\xc4\x8e\x11\xf1\x9b\x16\xf9\xe3\x62\xde\xd2\xb8\x8e\x17\xaf\x51\x37\xe5\x19\xdb\xf7\x1c\xcb\x7c\xc8\x7b\x4f\x83\x5e\x82\x60\x6d\x2a\x0c\x37\xa7\x5b\x2e\xf2\x9b\x09\x00\x80\xc2\xdf\x1a\xae\x30\x4f\xd4\x81\x16\x93\x42\xc7\x97\x7f\xfa\x02\x78\x16\x48\x8b\x71\x02\xf0\x16\x36\x99\xe2\xb5\xa9\x0e\x0a\x50\xe4\xb5\xe4\xc2\xe8\x1b\x50\xb8\x47\x05\x46\x42\x2e\x33\x0d\x5c\x40\x56\xca\x26\x67\x35\x7f\x57\x2b\x69\xe4\x04\xa0\xe4\x47\xfc\xc8\xf1\x99\xe0\xdc\xf9\xdf\xf7\x68\x58\xce\x0c\x73\x46\x6e\x57\xcc\xa4\x30\x28\x8c\x0e\x6c\x7c\x37\x98\xa2\xe5\xda\xe2\x20\x72\x0e\x51\x4c\xcc\xcd\x8e\x90\xda\x44\x13\x5e\xa6\x39\xd6\xa5\x3c\xc1\x13\x9e\xf4\x04\x20\xb7\x5f\x15\x0a\x73\x8b\x27\x62\x30\x0f\x07\x62\x3e\xd1\xda\x80\x4d\xb4\xc5\x73\x49\x56\x8b\x96\x05\xab\xb9\xa7\x9d\xac\x16\x67\x44\xdd\x6c\x40\xcd\x2d\xf2\x64\x56\x65\x73\xe0\x62\x02\x50\xdb\x1f\xfa\xea\x89\x8b\x7c\xea\x87\xc9\xae\xd7\x53\xf8\xd5\x7d\x39\x72\x0a\x49\x56\x2e\x85\x1b\xa4\xf3\x61\x69\xfb\xa3\x78\xe3\x09\x7d\x44\xa5\xad\x2f\xf7\x47\xb4\xdf\xf0\xc6\xb2\xde\x16\x5c\xc3\x33\x2f\x4b\xd8\x21\x28\xac\x4b\x96\x61\x0e\xbb\xd3\x90\xc5\x4c\x8a\x3d\x3f\x80\x14\x19\x02\x2b\x4b\xc8\xa4\xd0\x4d\x85\x4a\x43\xc1\x8e\x08\x3b\x44\x01\x4d\x9d\x33\x83\xf9\x3b\x17\x61\xd6\x63\x04\x42\x94\xbd\x50\x6e\x6e\x54\xb4\xd1\x6d\xa3\xa4\xa3\xcd\x9b\xce\x95\xd6\xf1\xd0\x80\x89\x1b\x1c\x90\x9f\xa3\x61\xbc\xc4\x7c\xb8\x75\xf2\xfb\x64\x12\x86\xec\xfb\xc6\x30\x9a\xb6\x51\x7b\xa6\x90\x19\xf4\xa1\x2b\x0a\x85\xf0\x97\x1c\x6b\x85\x19\xe9\xe6\x4a\x21\xd3\x64\x91\x6f\xfc\x02\x0d\x4c\x21\x08\xf9\x0c\x99\x25\x90\xc3\x91\x33\xa8\x5f\xbc\x1b\x7e\x73\x3d\x01\x78\xb4\x7a\xfd\xc8\xff\xc1\x6d\x50\x24\x7d\xf8\x53\x4e\x87\x7c\x31\x7f\x73\x03\xc7\x60\x72\x0a\x69\xce\x0d\xdb\x95\xd1\x96\x91\xf8\xec\x20\x47\x7e\x7d\xe6\xe6\x00\x73\xa4\xa8\x31\xbf\x70\x2a\x7e\x94\xb2\x44\x26\x7a\x72\xce\xb1\x7b\x07\x6f\x09\xb8\xef\xf1\x9d\x4e\xc0\x30\x8f\x5d\xe9\x2e\xbd\xb5\xc2\x44\x69\xee\xfa\x3c\xed\x6d\xd0\xc4\x99\xee\x8a\x05\x49\x30\xa4\x12\x24\xc3\xeb\xb1\xf4\xb8\x10\x47\xee\xe0\x5c\x61\xc5\x78\x19\x9c\xab\x3d\x57\xda\x2c\xc3\xb4\x77\x03\x25\x1b\x0c\x5d\xb7\xd9\x9b\xc8\xc4\xf2\xad\x50\x55\x5c\xd3\xa1\xd4\x57\x94\xa7\x3b\x03\x36\xf1\x64\x0c\x38\x98\xe8\x89\x87\x36\x7c\x50\x87\x2b\xa9\x0e\x43\x14\x8b\x79\xcf\xfd\x41\x1d\x3a\xe5\x4a\x75\xe8\x18\xcb\x7e\xbc\x67\x1a\x2c\x26\x3a\xc1\xd5\xc3\xf1\x73\xa2\x6d\xe5\x13\x8a\x80\xd8\x75\xc7\x7b\x02\xb0\xc6\xa3\x7c\xc2\xa4\x2c\x83\xb5\x3a\x5e\x1c\x78\xc0\x1a\x2b\x79\xb4\xb2\xbe\x57\xb2\x22\x71\x02\xed\x84\x4b\xe3\x78\xe9\x44\x7b\x35\xd2\xdc\x00\x0a\x12\x2b\xef\x08\x75\x23\x83\x10\x79\x43\x81\x6d\xcf\x43\x5d\x84\x44\xf5\xa8\xe3\xae\x47\xa2\x89\xd5\xad\x4b\x59\x3d\xa9\xc1\xc2\xb1\xe3\x33\xa4\xf5\x3a\x09\x67\x64\x77\xc8\x2e\x20\x09\x19\xfd\x3e\x99\xd8\xe0\xd5\x3a\x91\x0d\x5e\x7e\xdd\x04\x20\xba\xd2\x4d\x00\xe2\x03\x40\x29\x8a\x67\xa6\x51\xd1\x9a\xa1\xe7\xb9\xa1\xfe\x02\x42\x03\x5c\x27\x75\xad\xe4\x31\xb0\x41\x8f\x65\x31\x4f\x57\xcc\x14\x16\xca\x62\x9e\x0e\x89\xd5\xcc\x14\xfd\x77\xbb\xc9\x3b\xe5\x2b\xf8\x73\x59\x31\x2e\x86\x14\x9d\xf1\x1d\x22\x56\xea\xc8\x0e\x3c\x47\x02\x43\xb9\xc3\xe3\xa2\x9c\x11\xaa\xad\x3d\x1a\x96\x35\x13\xac\x3c\x19\x9e\xe9\x87\xda\x48\xba\xdb\x45\xa4\x1c\xac\x70\x73\x1f\x6a\xec\x76\x23\x1b\xb5\x41\x14\x97\xf6\xd9\x0b\xe3\x85\xe8\x35\x4e\x60\x7c\xd7\x17\x61\xee\x80\xc6\x57\x98\x81\x8a\x7d\xa2\x4a\xcc\xbd\x9e\xc2\xfb\x52\x32\xe3\xae\x4d\x3a\x3b\x37\x92\x23\x34\x20\xf0\x44\xf9\xa1\x37\xc6\xd7\xd0\x1b\xbd\xb7\xfd\x1b\xf8\x22\x7a\xff\x11\x98\x28\x9a\x6a\xe4\x32\xbf\x31\xcc\xa0\x65\x90\xa4\x9b\xcf\x8f\xcb\xdb\xe5\xc3\xcf\x4b\xff\xb5\x4a\x97\xf3\xc5\xf2\x27\xff\xb5\x7e\x5c\x2e\xfb\xaf\xf7\xc9\xe2\x2e\x9d\xfb\x8f\x6d\xba\xbe\x5f\x2c\x93\x6d\x3a\x1f\xe5\xd4\x57\x29\x8e\x51\xb2\x0d\x18\xbd\x85\x44\x00\xe6\xdc\xf8\x02\x07\x64\x46\x95\x0f\xf0\x3d\x30\x9b\x7d\xa0\x60\x1a\x2a\x99\xf3\x3d\xc7\x1c\x4c\x81\xe0\xbc\xc8\xe0\x8b\xa1\x0b\x21\x17\x1a\x15\xf9\x10\x48\x05\x39\x85\x1b\xfa\x9d\x15\x4c\xb1\x8c\x2e\x32\xef\xfa\xfb\x24\x17\x59\xd9\xe4\xa8\xe9\x9a\x64\x37\x08\x4b\xef\x09\x4f\x3b\xc9\x54\x0e\x4c\xe4\x50\x33\xed\x08\xc8\xaa\x62\x22\xb7\xdb\x09\x71\x3a\x5f\x6c\x1d\x5c\xd0\x58\x62\xd6\xe3\x15\xe5\x69\x1c\x74\x56\x48\x8d\x02\x98\x88\x0a\x2e\xd0\xcd\xe1\x80\x9a\xf6\xbe\x6b\x61\xe5\x9c\x6e\x61\x1a\x6c\xfd\xf2\xd6\x82\x8a\xb6\x98\x82\x19\xe0\x06\x74\x21\x9b\x32\x07\xca\x49\x76\x11\xb1\xfa\x56\xfb\x52\x91\x8a\x22\x1a\x14\xa4\x18\x46\x31\xa4\x56\x9c\xac\x6b\xd8\xae\x95\x62\x93\xde\xa5\xb3\xed\x1f\xf8\x03\xdd\xea\xbd\x3b\xdc\x46\xee\x70\xfb\x79\xf5\x30\xf7\xbf\x36\x1f\x67\xed\xaf\xd9\x7a\xb1\xda\xfa\x8f\x65\x72\x9f\x6e\x56\xc9\x2c\x6d\xbf\x1f\xe6\x69\x7f\xe2\x02\x56\x9b\x4e\x03\x96\x95\xab\x2a\xc6\xb1\x0c\x42\xa7\xf7\x6c\x4a\x22\x41\x76\x9c\x00\x54\xcc\x64\x05\xe6\x0b\x91\xe3\x8b\x2d\x44\x17\xc2\x7c\xa2\xea\x8c\xfc\x7b\x8c\xb8\x75\xfc\x0e\xdd\x96\xed\x06\xa0\xc8\x65\xc8\xd5\x72\x7c\x01\xb9\xb7\x8a\x35\x6c\xe7\x2c\x61\x0a\xd4\xa1\x1d\xdd\x65\x79\x2f\x15\xa9\xd9\xb0\x9d\x45\x61\xcb\x76\x4b\xe8\xe7\x02\x4d\x81\xca\xfb\x0d\x39\x17\x0b\x36\xd3\x3e\x30\xe4\x07\x44\xdf\x31\xb4\x85\x4f\xc5\x9e\x9c\x95\xbd\x2b\x02\xbe\x60\xd6\xd8\xc8\x49\x7c\xfa\xaf\x64\x6f\x28\x90\x12\xf1\x3e\x64\x42\x88\x6f\x50\x98\xf7\xa2\x7e\x1a\xb5\x8f\xab\xc2\x03\x35\xec\xa5\xaa\x98\xa1\x2a\xc0\x9d\x3d\x02\xdb\x1d\x44\xed\x6f\x28\xcf\x05\xcf\x0a\xeb\xf8\xb6\xea\xaa\x99\xd2\xae\x64\x3b\x77\x67\xd9\xf9\xbc\xf3\x77\xb6\xdb\x18\x59\x43\x2d\x35\xb7\x78\x49\xbe\x8e\xe7\x22\xec\x4d\x44\x0a\x1d\x62\x20\x5c\x0c\x8e\xac\xe4\xf9\x4d\xa0\x9f\x56\x81\xef\x6c\xbe\x4f\xbb\xf1\x50\x59\x6f\x21\x29\xcb\xc8\xa4\x64\x16\x64\x59\x11\x58\x9f\x40\x6a\x6f\xe3\x4d\xa4\xdd\xc8\x7f\xc6\x95\x1a\xf4\x37\x02\xcd\x5e\x88\x0c\xda\x7b\x45\x2b\x1f\x5d\x08\x78\x8e\xf9\x97\x9a\xf5\x4d\xa4\x27\xa9\x40\x48\xeb\xb6\x54\x61\x36\x4a\x60\x0e\xca\x22\x71\x9e\x5b\x33\x65\x38\x2b\xe1\xca\xa8\x06\xaf\x69\x79\x07\xe9\x6a\xcf\x4a\x8d\x54\xed\x15\x4c\x27\x79\x6e\xed\xc3\xca\x7b\x7b\xdc\xf4\xc8\x9d\x69\x26\x85\x61\x5c\xa0\xa2\x03\xd6\xb8\xbc\x3e\xbc\xfc\x8c\xa7\x2c\x7f\x54\xfb\x65\x15\x6a\xcd\x0e\xd1\x50\x5b\xa6\x86\x23\xda\x30\x65\x66\xb2\x11\xc6\x1e\xb9\x1e\xca\xed\xff\xeb\xf4\x88\xc2\xa9\x7b\x84\x98\x2d\x9a\xb6\xbc\xc2\x08\x06\x95\x4d\x83\xc1\x96\xe0\x4a\xe6\x7f\x4a\xaa\x46\x7f\xb5\x58\x59\xab\x46\xdb\xa5\x8c\x75\xea\x7a\x05\x48\xa2\xd1\x6c\x2b\x66\xdb\x42\x18\xd3\x87\x8d\xf6\xbe\xcc\x0e\x44\x70\x3e\x98\xe3\x9e\x91\x57\x5a\x03\x50\x0e\x13\xd2\x14\xfe\x38\x3d\x09\xf9\x2c\xc8\xe5\x67\x9b\x28\x69\xd3\x3e\xbf\x5e\x43\x81\xac\x34\xc5\x89\xb6\x16\xc8\x94\xd9\x21\xf3\x9e\xa5\x30\x43\x7e\xc4\x9c\x52\xad\xc2\x43\x53\x32\x05\x5c\x18\x54\x74\xbd\xb5\xf9\xd6\x14\x2e\x06\xf8\xce\x01\x91\x53\xa8\x6b\x29\x72\x42\x60\xa4\x6d\x32\xa2\x36\xda\x83\xf8\x90\x26\x77\xdb\x0f\xbf\x9c\x83\x68\x44\x00\xc3\x86\xcd\x9e\x62\xe6\x5a\xb6\x74\x7f\x90\xb0\xe2\x2f\x1c\x61\x56\xca\xc6\x65\x7c\xae\xfd\xf1\x6a\xc3\x4b\x2f\xc3\x0d\xec\x6c\xb4\x13\xdf\x1a\xf8\xad\x41\x75\xb2\xe1\x84\x8e\xa6\x96\x15\x7a\xb3\xf9\x2c\xae\x50\x63\xb5\x2b\x51\xc3\x87\xed\x76\xf5\xad\x86\xef\xbf\xfb\xce\x5b\xbf\xd3\xdf\x38\x78\x1b\xed\x0f\xd2\x36\x35\xb9\xee\xb1\x7a\x39\x7e\x5a\xaf\x66\xad\x04\x94\x2f\x76\x0a\xd9\x93\x7e\x67\x09\x14\xb2\x46\x17\x8d\x99\xe9\xae\x0e\xad\xe0\x96\x6e\x46\x40\x77\x2c\x7b\xa2\x8b\x0a\x17\x68\x45\xa6\xc3\x5f\x51\x6c\x01\x8f\xc8\x21\xf1\x38\xe7\x8b\xcd\xec\x61\xb9\x4c\x67\x5b\x7b\xc3\x1b\xea\x99\x6a\x4b\xb2\xcd\x73\x81\x62\xa8\x68\xee\x46\x6a\x25\x33\xd4\x9a\x42\x67\xbb\xbc\xd5\xc1\x6a\x9e\x6c\xdd\x35\xd2\xd1\x75\x1d\x22\x77\x5f\x6a\x25\x77\x6a\xa7\x21\x0a\x5b\x9a\x8e\x30\x13\x27\x90\x36\x98\xed\x1b\xe5\xb2\xa9\x73\x63\xd7\xdc\xd3\xc0\x76\xb2\x71\x2a\x78\xf6\x51\x8f\x9b\xd0\x37\xa5\x1a\x42\x39\x97\xd1\x63\x79\x66\x1a\x8c\x3a\x79\xff\x73\x0c\x1c\xa4\xbd\xed\xbf\xb5\x5e\x23\xe4\x33\x09\xcc\x60\xc7\xf2\x48\x81\x56\xc8\xb4\xbf\x23\x0f\x34\x98\xe3\x41\xb1\xbc\x37\x70\xa0\xbf\x92\x3f\x61\x79\x22\xb6\x3b\x0c\x3c\x8e\x78\x57\xfc\x50\x18\x1a\xb6\x2d\x17\xef\xaa\x54\x66\xb4\x56\x4b\x7f\x5a\x27\x73\x77\x05\xb7\xd1\x2a\xec\xb2\xd9\xd3\x5e\x33\xad\x4d\xa1\x64\x73\x28\xd2\x41\xdf\x21\x88\xdf\x41\x83\x30\xae\x3b\xda\x48\x16\x85\x91\x36\x62\x7e\x68\xcf\x4c\x14\xfc\xe2\xf6\x5f\xd4\xf6\xeb\x66\x87\xcd\xe0\xfe\x11\xe6\xf2\xcc\x59\x25\xae\xd0\x98\xd3\x6c\x7c\xf2\xfc\xe5\xa1\x0d\xb0\x4a\x96\xab\x92\x09\xec\xe2\xba\xbd\x39\x76\x5f\x2e\xa0\x76\x71\x65\xce\x0c\x7b\x7d\xb9\x68\xaa\xa5\xcc\x51\xfb\xd8\x6b\x07\x16\x42\x1b\xd5\x50\x35\x87\x79\x3c\xe9\x74\x7a\x7f\x9e\x11\x6a\x85\x47\x2e\x1b\xbd\x19\x53\xfa\xd9\x7c\x94\xaf\x86\xa6\x8c\xdf\xab\x9c\x51\xeb\x24\xcf\x15\xea\x28\x2f\x19\xf9\x84\xe2\xbc\x14\xed\x5b\x86\x76\xeb\x59\xe3\x85\xdb\xb9\x3b\x2e\x9e\xa2\xbd\x6f\x61\xfd\xca\x4b\x8d\xa5\x3e\x7c\xa0\x79\xad\x6d\x32\x2c\x6b\xbf\x92\x4d\xfb\x1a\xe3\xaf\x04\x8e\xe7\xf4\x0c\x85\xb5\xc0\x4b\xd9\xae\x0e\x11\x1c\xb9\xfe\xeb\xe6\x61\xf9\x67\x40\xc4\xaf\x47\x5f\x25\xa9\xbd\x7e\xb5\x28\xe3\x53\xfb\x55\xcc\x2f\xc8\x3f\x78\xd7\xf2\xc7\x23\x16\xbd\xab\x19\x83\x27\x4d\x4b\x06\x20\x2a\xe8\xed\xe7\xdd\x62\xf9\xf8\xf7\xcf\xc9\xfd\xfc\x87\xff\x6b\x87\xe6\xc9\xfa\xe7\xc5\x32\x1e\x9b\x3d\x2c\xb7\xc9\x62\x99\xae\x3f\x6f\xd2\xed\xe7\x5f\x92\xfb\xbb\xcd\xf8\xd4\x08\xbd\x78\xc1\x36\xbd\x5f\xdd\x51\xd0\x75\x44\xba\x23\xd0\xbf\xb7\xba\x37\x6c\x15\xf9\xae\x2e\xd8\xff\x7e\xff\x43\x24\x63\xdc\xa2\xfa\x9a\x18\x3a\xde\xe0\x0a\x7a\xe4\xce\xe2\xe7\x0d\xc7\xf3\x8d\x41\x9f\xdb\x1d\xba\x0b\x7d\x41\x67\x7f\xd7\x09\xfe\x1f\x85\xa5\x7d\xa8\x21\xc1\xf5\xbb\xf6\xca\x6a\xe7\x46\xef\xab\x41\x23\x7a\xbc\xac\xb6\xb1\x5d\x1e\x64\x50\x7b\x11\x07\x6d\x46\x02\xb3\x6e\xea\x5a\x2a\xa3\xbb\x4e\x6f\xd4\x38\xec\xde\xb5\xce\xf3\x0e\x5c\xe8\x78\x77\xfe\xd6\xbf\x36\x5a\x29\x56\x61\x5b\x62\x75\xfb\x79\x9d\x6e\xd3\xe5\x76\xf1\xb0\xec\x6f\xe9\xe1\xc3\xe0\x98\xe0\x47\x56\x36\x78\x1e\xe8\xfa\x27\x48\xbb\xab\x6b\xb8\x47\x8f\x81\x9b\xac\xc0\xaa\x7d\x3c\x2d\x4b\xf9\x3c\x6b\xb4\x91\x55\xfa\x42\xd2\x3f\xae\xef\x46\x32\xea\xf9\xf6\x51\x54\xa3\x06\x38\xf3\x8c\x3f\x21\xdc\x65\x02\x7a\x20\xe8\xd8\x1a\xff\xb7\x88\xa1\x94\xbd\x91\xac\x8c\xa3\x4f\x1d\x7f\xa0\xc6\x57\xa9\xbe\x05\x4a\xb7\xbd\xe3\xc4\x5e\x3d\x78\x4f\xf8\x82\x50\x3a\xe2\xda\x7b\x5b\x59\x88\xec\xb4\xe9\xd2\xf1\xf0\x39\x66\xf0\x6f\x91\xc5\xdc\xe1\x76\xaf\xd8\xc3\x87\x84\x15\x55\x00\x66\xc4\x01\x2e\xbc\xdb\xfe\xb7\x51\x9f\x87\xf4\x71\x49\x2e\x59\xe5\x92\x8c\xb1\x7f\x8d\x09\xf9\x45\x1d\xbc\x81\x60\x23\x72\x9d\x8b\x35\x22\xd5\x88\x50\x7f\xe8\x69\xff\x0a\x00\x00\xff\xff\x78\x5e\xfe\xca\xec\x24\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 9452, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
