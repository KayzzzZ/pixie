syntax = "proto3";

package px.stirling.eventpb;
option go_package = "eventpb";

message KindlingEventList {
  repeated KindlingEvent kindling_event_list = 1;
}
message KindlingEvent {
  Source source = 1;
  // Timestamp in nanoseconds at which the event were collected.
  uint64 timestamp = 2;
  // Name of Kindling Event
  string name = 3;
  // Category of Kindling Event, enum
  Category category = 4;
  // Native attributes of hook point, including arguments or return value.
  Property Native_attributes = 5;
  // User-defined Attributions of Kindling Event, now including latency for syscall.
  repeated KeyValue user_attributes = 6;
  // Context includes Thread information and Fd information.
  Context ctx = 7;
}

message AnyValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int64 int_value = 3;
    uint64 uint_value = 4;
    double double_value = 5;
    bytes bytes_value = 6;
    ArrayValue array_value = 7;
  }
}

message ArrayValue {
  repeated AnyValue values = 1;
}

message KeyValue {
  string key = 1;
  AnyValue value = 2;
}

enum Source {
  SOURCE_UNKNOWN = 0;
  SYSCALL_ENTER = 1;
  SYSCALL_EXIT = 2;
  TRACEPOINT = 3;
  KRPOBE = 4;
  KRETPROBE = 5;
  UPROBE = 6;
  URETPROBE = 7;
}
enum Category {
  CAT_NONE = 0;
  CAT_OTHER = 1; // No specific category
  CAT_FILE = 2; // File operations or File I/O
  CAT_NET = 3; // Network operations or network I/O
  CAT_IPC = 4; // IPC operations or IPC I/O
  CAT_WAIT = 5; //
  CAT_SIGNAL = 6; // Signal-related operations (signal)
  CAT_SLEEP = 7; // nanosleep
  CAT_TIME = 8; // Time-related event (e.g. gettimeofday)
  CAT_PROCESS = 9; // Process-related event (e.g. fork, clone,
  CAT_SCHEDULER = 10; // Scheduler event (context switch)
  CAT_MEMORY = 11; // Memory-related operations (e.g. brk, mmap, unmap)
  CAT_USER = 12; // User-related operations (e.g. getuid, setgid)
  CAT_SYSTEM = 13; // System-related operations (e.g. reboot)
}

message Property {
  // If type of syscall_enter, kprobe, uprobe, tracepoint
  repeated KeyValue args = 1;
  // If type of syscall_exit, kretprobe, uretprobe
  repeated KeyValue ret = 2;
}

message Pair {
  // Arguments' Name or Attributions' Name.
  string key = 1;
  // Type of Value.
  ValueType value_type = 2;
  // Value of Key in bytes, should be converted according to ValueType.
  bytes value = 3;
}
enum ValueType {
  NONE = 0;
  INT8 = 1; // 1 byte
  INT16 = 2; // 2 bytes
  INT32 = 3; // 4 bytes
  INT64 = 4; // 8 bytes
  UINT8 = 5; // 1 byte
  UINT16 = 6; // 2 bytes
  UINT32 = 7; // 4 bytes
  UINT64 = 8; // 8 bytes
  CHARBUF = 9; // bytes, NULL terminated
  BYTEBUF = 10; // bytes
  FLOAT = 11; // 4 bytes
  DOUBLE = 12; // 8 bytes
  BOOL = 13; // 4 bytes
}
message Context {
  // Thread information corresponding to Kindling Event, optional.
  Thread thread_info = 1;
  // Fd information corresponding to Kindling Event, optional.
  Fd fd_info = 2;
}

message Thread {
  // Process id of thread.
  uint32 pid = 1;
  // Thread/task id of thread.
  uint32 tid = 2;
  // User id of thread
  uint32 uid = 3;
  // Group id of thread
  uint32 gid = 4;
  // Command of thread.
  string comm = 5;
  // ContainerId of thread
  string container_id = 6;
  // ContainerName of thread
  string container_name = 7;
}

message Fd {
  // FD number.
  int32 num = 1;
  // Type of FD in enum.
  FDType type_fd = 2;

  // if FD is type of file
  string filename = 3;
  string directory = 4;

  // if FD is type of ipv4 or ipv6
  L4Proto protocol = 5;
  // repeated for ipv6, client_ip[0] for ipv4
  bool role = 6;
  repeated uint32 sip = 7;
  repeated uint32 dip = 8;
  uint32 sport = 9;
  uint32 dport = 10;

  // if FD is type of unix_sock
  // Source socket endpoint
  uint64 source = 11;
  // Destination socket endpoint
  uint64 destination = 12;
}

// File Descriptor type
enum FDType {
  FD_UNKNOWN = 0;
  FD_FILE = 1;
  FD_DIRECTORY = 2;
  FD_IPV4_SOCK = 3;
  FD_IPV6_SOCK = 4;
  FD_IPV4_SERVSOCK = 5;
  FD_IPV6_SERVSOCK = 6;
  FD_FIFO = 7;
  FD_UNIX_SOCK = 8;
  FD_EVENT = 9;
  FD_UNSUPPORTED = 10; // TODO
  FD_SIGNALFD = 11;
  FD_EVENTPOLL = 12;
  FD_INOTIFY = 13;
  FD_TIMERFD = 14;
  FD_NETLINK = 15;
  FD_FILE_V2 = 16;
}

enum L4Proto {
  UNKNOWN = 0;
  TCP = 1;
  UDP = 2;
  ICMP = 3;
  RAW = 4;
}